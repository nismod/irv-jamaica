import os
import subprocess

import geopandas
import pandas


# Example config
# - override by running:
#    snakemake --cores=1 --configfile=config_local.yml all
configfile: "config.yml"


# Read further configuration data from CSV
hazard_layers = pandas.read_csv(config["hazard_layers"])
hotspot_layers = pandas.read_csv(config["hotspot_layers"])
network_layers = pandas.read_csv(config["network_layers"])
network_layers_areal_protection = pandas.read_csv(config["network_layers_areal_protection"])
storm_layers = pandas.read_csv(config["storm_layers"])
network_tilelayers = pandas.read_csv(config["network_tilelayers"])
damage_rp_files = pandas.read_csv(config["damage_rp_files"])
damage_exp_files = pandas.read_csv(config["damage_exp_files"])
adaptation_files = pandas.read_csv(config["adaptation_files"])


wildcard_constraints:
    layer="[^/]+",


# Run all file-base jobs, after load_to_database
rule all:
    input:
        expand(
            "../tileserver/vector/data/{layer}.mbtiles", layer=network_tilelayers.layer
        ),
        expand("../tileserver/raster/data/{layer}.tif", layer=hazard_layers.key),
        expand('../tileserver/raster/data/{layer}.tif', layer=storm_layers.key),
        expand("../tileserver/raster/data/{layer}.tif", layer=hotspot_layers.key),


# Prerequisite, not fully traced by file dependency
#   snakemake --cores=all load_to_database
rule load_to_database:
    input:
        expand("logs/network/{layer}.txt", layer=network_layers.ref),
        expand("logs/network/{layer}.txt", layer=network_layers_areal_protection.ref),
        expand("logs/damages_rp/{layer}.txt", layer=damage_rp_files.ref),
        expand("logs/damages_exp/{layer}.txt", layer=damage_exp_files.ref),
        expand("logs/damages_npv/{layer}.txt", layer=network_layers.damage_ref),
        expand(
            "logs/adaptation/{hazard}/{layer}.txt",
            zip,
            hazard=adaptation_files.hazard,
            layer=adaptation_files.damage_ref,
        ),


rule feature_layers_to_db:
    input:
        config["network_tilelayers"],
    output:
        "logs/feature_layers.txt",
    script:
        "./scripts/feature_layers_to_db.py"


rule networks_to_db:
    """Read from source directory to database
    """
    input:
        "logs/feature_layers.txt",
    output:
        "logs/network/{layer}.txt",
    script:
        "./scripts/networks_to_db.py"


rule damages_rp_to_db:
    input:
        damage=f"{config['analysis_data_dir']}/results/direct_damages_summary_uids/{{layer}}_damages.parquet",
        exposure=f"{config['analysis_data_dir']}/results/direct_damages_summary_uids/{{layer}}_exposures.parquet",
        loss=f"{config['analysis_data_dir']}/results/direct_damages_summary_uids/{{layer}}_losses.parquet",
    output:
        "logs/damages_rp/{layer}.txt",
    script:
        "./scripts/damages_rp_to_db.py"


rule damages_exp_to_db:
    input:
        expected=f"{config['analysis_data_dir']}/results/direct_damages_summary_uids/{{layer}}_EAD_EAEL.parquet",
    output:
        "logs/damages_exp/{layer}.txt",
    script:
        "./scripts/damages_exp_to_db.py"


rule damages_npv_to_db:
    input:
        npv=f"{config['analysis_data_dir']}/results/loss_damage_npvs/{{layer}}_EAD_EAEL_npvs.csv",
        uid=f"{config['analysis_data_dir']}/processed_data/networks_uids/id_lookups/{{layer}}_ids.parquet",
    output:
        "logs/damages_npv/{layer}.txt",
    script:
        "./scripts/damages_npv_to_db.py"


rule adaptation_to_db:
    input:
        avoided_risk=f"{config['analysis_data_dir']}/results/adaptation_benefits_costs_bcr/{{hazard}}_{{layer}}_adaptation_costs_avoided_EAD_EAEL.csv",
        uid=f"{config['analysis_data_dir']}/processed_data/networks_uids/id_lookups/{{layer}}_ids.parquet",
        network_layers=config["network_layers"]
    output:
        "logs/adaptation/{hazard}/{layer}.txt",
    script:
        "./scripts/adaptation_to_db.py"


rule coastal_adaptation_to_db:
    input:
        avoided_risk=f"{config['analysis_data_dir']}/results/adaptation_benefits_costs_bcr/coastal_{{layer}}_adaptation_costs_avoided_EAD_EAEL.csv",
        uid=f"{config['analysis_data_dir']}/processed_data/networks_uids/id_lookups/{{layer}}_ids.parquet",
        network_layers=config["network_layers_areal_protection"],
    wildcard_constraints:
        layer=r"(coastal_protection_feature_areas)"
    output:
        "logs/adaptation_coastal/{layer}.txt",
    script:
        "./scripts/adaptation_to_db.py"


rule coastal_adaptation_protected_assets_to_db:
    input:
        avoided_risk=f"{config['analysis_data_dir']}/results/adaptation_benefits_costs_bcr/coastal_{{layer}}_adaptation_costs_avoided_EAD_EAEL.csv",
        protector_dict = f"{config['analysis_data_dir']}/results/coastal_protection_assets/network_protection_mappings/{{layer}}_coastal_filtered.parquet",
        uid=f"{config['analysis_data_dir']}/processed_data/networks_uids/id_lookups/{{layer}}_ids.parquet",
        p_uid=f"{config['analysis_data_dir']}/processed_data/networks_uids/id_lookups/coastal_protection_feature_areas_ids.parquet",
    wildcard_constraints:
        layer=r"^((?!coastal_protection_feature).)$",  # Everything except the defence features themselves
    output:
        "logs/adaptation_coastal/{layer}.txt",
    script:
        "./scripts/coastal_adaptation_to_db.py"


def all_coastal_adaptation_to_db_log_paths(wildcards):
    return \
        expand("logs/adaptation_coastal/{layer}.txt", layer=network_layers.damage_ref) \
        + expand("logs/adaptation_coastal/{layer}.txt", layer=network_layers_areal_protection.damage_ref)

rule all_coastal_adaptation_to_db:
    input:
        all_coastal_adaptation_to_db_log_paths
    output:
        "logs/adaptation_coastal/all.flag",
    shell:
        """
        touch {output}
        """


rule db_to_geojsonseq:
    """Load from database to GeoJSONSeq
    """
    output:
        "vector/{layer}.geojsonl",
    script:
        "scripts/db_to_geojsonseq.py"


rule geojsonseq_to_vector_tiles_coastal_protection:
    input:
        "vector/coast_nodes_cpf.geojsonl",
    output:
        "../tileserver/vector/data/coast_nodes_cpf.mbtiles",
    shell:
        """
        tippecanoe \\
            --use-attribute-for-id=id \\
            --read-parallel \\
            --output={output} \\
            --layer=coast_nodes_cpf \\
            --force \\
            {input}
        """


rule geojsonseq_to_vector_tiles:
    input:
        "vector/{layer}.geojsonl",
    output:
        "../tileserver/vector/data/{layer}.mbtiles",
    run:
        layer = get_tilelayer(wildcards.layer, network_tilelayers)

        max_zoom = 20
        point_polygon_zoom_switch = 13

        if layer.spatial_type == "line":
            options = [
                "--drop-densest-as-needed",
                "--minimum-zoom=3",
                f"--maximum-zoom={max_zoom}",
            ]
        elif layer.spatial_type == "polygon":
            options = [
                "--drop-smallest-as-needed",
                f"--minimum-zoom={point_polygon_zoom_switch}",
                f"--maximum-zoom={max_zoom}",
            ]
        else:
            options = [
                "--drop-densest-as-needed",
                "-Bg",
                f"--maximum-zoom={max_zoom}",
                "--full-detail=12"
            ]

        subprocess.run(
            [
                "tippecanoe",
                "--use-attribute-for-id=uid",
                "--read-parallel",
                f"--output={output}",
                f"--layer={wildcards.layer}",
            ]
            + options
            + ["--force", f"{input}"],
            check=True
        )

        if layer.spatial_type == "polygon":
            # create points as centroids
            input_basename = os.path.basename(str(input))
            input_layer = input_basename.replace(".geojsonl", "")
            os.makedirs("vector/points", exist_ok=True)
            tmp_output = f"vector/points/{input_basename}"
            subprocess.run(
                [
                    "ogr2ogr",
                    "-sql",
                    f"SELECT ST_Centroid(geometry), * FROM {input_layer}",
                    "-dialect",
                    "sqlite",
                    tmp_output,
                    str(input)
                ],
                check=True
            )
            subprocess.run(
                [
                    "tippecanoe",
                    "--use-attribute-for-id=uid",
                    "--read-parallel",
                    f"--output={output}",
                    f"--layer={wildcards.layer}",
                    "--drop-densest-as-needed",
                    "--minimum-zoom=3",
                    f"--maximum-zoom={point_polygon_zoom_switch - 1}",
                    "--force", f"{tmp_output}"
                ],
                check=True
            )


def get_tilelayer(layer_name, network_tilelayers):
    try:
        return network_tilelayers[network_tilelayers.layer == layer_name].iloc[0]
    except IndexError as e:
        print(f"Could not find {layer_name} in tilelayers.")
        raise e


rule extract_regions:
    input:
        population=f"{config['analysis_data_dir']}/processed_data/population/population.gpkg",
        boundaries=f"{config['analysis_data_dir']}/processed_data/boundaries/admin_boundaries.gpkg",
    output:
        adm1="regions/regions_parish.geojsonl",
        adm3="regions/regions_enumeration.geojsonl",
    run:
        adm3 = geopandas.read_file(str(input.population), layer="admin3")
        adm3.PARISH = adm3.PARISH.str.replace(" ", "")
        adm3.PARISH = adm3.PARISH.str.replace(".", ". ")
        adm3.PARISH = adm3.PARISH.str.title()
        adm3["population_density_per_km2"] = adm3.population / (
            adm3.geometry.area * 1e-6
        )
        adm3 = adm3.to_crs(epsg=4326)
        adm3.to_file(output.adm3, driver="GeoJSONSeq", index=False)

        adm1_pop = adm3[["PARISH", "population"]].groupby("PARISH").sum()
        adm1 = geopandas.read_file(str(input.boundaries), layer="admin1")
        adm1 = adm1.set_index("PARISH").join(adm1_pop)
        adm1["population_density_per_km2"] = adm1.population / (
            adm1.geometry.area * 1e-6
        )
        adm1 = adm1.to_crs(epsg=4326).reset_index()
        adm1.to_file(output.adm1, driver="GeoJSONSeq", index=False)


rule region_labels:
    input:
        "regions/regions_{layer}.geojsonl",
    output:
        "regions/regions_{layer}_labels.geojsonl",
    shell:
        """
        cat {input} | geojson-polygon-labels > {output} \
            --ndjson \
            --label=polylabel \
            --style=largest \
            --include-minzoom=9-16 \
            --include-area \
            --include-bbox
        """


rule region_mbtiles:
    input:
        "regions/{layer}.geojsonl",
    output:
        "regions/{layer}.mbtiles",
    shell:
        """
        tippecanoe \
            --generate-ids \
            --read-parallel \
            --output="{output}" \
            --layer={wildcards.layer} \
            --force \
            {input}
        """


rule all_region_mbtiles:
    input:
        "regions/regions_parish.mbtiles",
        "regions/regions_parish_labels.mbtiles",
        "regions/regions_enumeration.mbtiles",
        "regions/regions_enumeration_labels.mbtiles",
    output:
        "../tileserver/vector/data/regions_parish.mbtiles",
        "../tileserver/vector/data/regions_parish_labels.mbtiles",
        "../tileserver/vector/data/regions_enumeration.mbtiles",
        "../tileserver/vector/data/regions_enumeration_labels.mbtiles",
    shell:
        """
        mv regions/regions_*.mbtiles ../tileserver/vector/data/
        """


rule tileserver_vector_config:
    input:
        expand(
            "../tileserver/vector/data/{layer}.mbtiles", layer=network_tilelayers.layer
        ),
        "../tileserver/vector/data/regions_parish.mbtiles",
        "../tileserver/vector/data/regions_parish_labels.mbtiles",
        "../tileserver/vector/data/regions_enumeration.mbtiles",
        "../tileserver/vector/data/regions_enumeration_labels.mbtiles",
    output:
        "../tileserver/vector/config.json",
    run:
        with open(str(output), "w") as fh:
            tileserver_vector_config = {
                "options": {"paths": {"root": "", "fonts": "fonts", "mbtiles": "data"}},
                "styles": {},
            }
            data = {}
            for fname in sorted(input):
                fname = os.path.basename(fname)
                data[fname.replace(".mbtiles", "")] = {"mbtiles": fname}
            tileserver_vector_config["data"] = data

            json.dump(tileserver_vector_config, fh, indent=2)


rule raster_temp_file:
    output:
        "raster/link/{layer}.tif",
    run:
        layer = get_hazard_layer(wildcards.layer, hazard_layers)
        original = os.path.join(config["analysis_data_dir"], "processed_data", layer.path)
        print(f"Creating symlink from {original} to {output}")
        os.symlink(os.path.abspath(original), str(output))


def get_hazard_layer(layer_name, hazard_layers):
    try:
        hazard_layer = hazard_layers[hazard_layers.key == layer_name]
        storm_layer = storm_layers[storm_layers.key == layer_name]
        hotspot_layer = hotspot_layers[hotspot_layers.key == layer_name]
        if not hazard_layer.empty:
            return hazard_layer.iloc[0]
        elif not storm_layer.empty:
            return storm_layer.iloc[0]
        elif not hotspot_layer.empty:
            return hotspot_layer.iloc[0]
        else:
            raise IndexError
    except IndexError as e:
        print(f"Could not find {layer_name} in hazard layers.")
        raise e


rule raster_set_nodata:
    """
    Set non-positive values to nodata (rendered transparent in viewer).

    Treat hotspot layers differently, just copy input to output.

    Test with:
    snakemake -c1 raster/nodata/storm50__rp_0__rcp_8x5__epoch_2050__conf_None.tif
    snakemake -c1 raster/nodata/allEADcyclone__rp_100__rcp_baseline__epoch_2010__conf_None.tif
    """
    input:
        hotspot_layers="hotspot_layers.csv",
        temp_file=rules.raster_temp_file.output,
    output:
        "raster/nodata/{layer}.tif",
    shell:
        """
        NODATA=$(gdalinfo "{input.temp_file}" -json | jq .bands[0].noDataValue)

        # handle case of NODATA == nan - the JSON output of gdalinfo will change
        # nan to "NaN" so we need to reverse that for gdal_calc.py
        if [ "$NODATA" == '"NaN"' ]
        then
          NODATA=nan
        fi

        if [ "$NODATA" == 'null' ]
        then
          NODATA=nan
        fi

        # Leave hotspots layers unmodified, with their 0 values intact
        KEY_COL_NUMBER=$(awk -v RS=',' '/key/{{print NR; exit}}' {input.hotspot_layers})
        MATCHING_ROW=$(awk -F, -v val='{wildcards.layer}' -v col="${{KEY_COL_NUMBER}}" '$col == val' {input.hotspot_layers})
        # Check if layer wildcard is in the key column of hotspot_layers.csv
        if [ ! -z "${{MATCHING_ROW}}" ]
        then
            echo "Hotspot layer, copying without modification"
            cp {input.temp_file} {output}
        else
            echo "Non hotspot layer, setting non-positive values to nodata (NaN)"
            # replace zeros with NoData value
            gdal_calc.py \
            --quiet \
            -A "{input.temp_file}" \
            --outfile="{output}" \
            --overwrite \
            --calc="numpy.where(A<=0,$NODATA,A)" \
            --NoDataValue=$NODATA \
            --hideNoData
        fi
        """


rule raster_to_cog:
    input:
        rules.raster_set_nodata.output,
    output:
        "../tileserver/raster/data/{layer}.tif",
    shell:
        """
        # translate to Cloud-Optimised GeoTIFF
        #
        # could use gdalwarp directly - options chosen to match (reasonably
        # closely) the output of `terracotta optimize-rasters`:
        #
        # gdalwarp "{input}" "{output}" \
        #     -t_srs "EPSG:3857" \
        #     -r near \
        #     -of COG \
        #     -co COMPRESS=DEFLATE \
        #     -co BLOCKSIZE=256
        #
        terracotta optimize-rasters \
            -o ../tileserver/raster/data/ \
            --overwrite \
            --reproject \
            --nproc -1 \
            --resampling-method nearest \
            {input}
        """
