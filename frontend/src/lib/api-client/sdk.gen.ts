// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { FeaturesReadFeatureData, FeaturesReadFeatureResponse, FeaturesReadFeatureError, FeaturesReadSortedFeaturesData, FeaturesReadSortedFeaturesResponse, FeaturesReadSortedFeaturesError, AttributesReadAttributesData, AttributesReadAttributesResponse, AttributesReadAttributesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Feature
 */
export const featuresReadFeature = <ThrowOnError extends boolean = false>(options: Options<FeaturesReadFeatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FeaturesReadFeatureResponse, FeaturesReadFeatureError, ThrowOnError>({
        url: '/features/{feature_id}',
        ...options
    });
};

/**
 * Read Sorted Features
 */
export const featuresReadSortedFeatures = <ThrowOnError extends boolean = false>(options: Options<FeaturesReadSortedFeaturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FeaturesReadSortedFeaturesResponse, FeaturesReadSortedFeaturesError, ThrowOnError>({
        url: '/features/sorted-by/{field_group}',
        ...options
    });
};

/**
 * Read Attributes
 */
export const attributesReadAttributes = <ThrowOnError extends boolean = false>(options: Options<AttributesReadAttributesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttributesReadAttributesResponse, AttributesReadAttributesError, ThrowOnError>({
        url: '/attributes/{field_group}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};