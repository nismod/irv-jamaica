// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { AttributesReadAttributesData, AttributesReadAttributesResponse, FeaturesReadFeatureData, FeaturesReadFeatureResponse, FeaturesReadSortedFeaturesData, FeaturesReadSortedFeaturesResponse, FeaturesReadProtectedFeaturesData, FeaturesReadProtectedFeaturesResponse } from './types.gen';

export class AttributesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Read Attributes
     * @param data The data for the request.
     * @param data.fieldGroup
     * @param data.layer
     * @param data.field
     * @param data.dimensions
     * @param data.parameters
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public attributesReadAttributes(data: AttributesReadAttributesData): CancelablePromise<AttributesReadAttributesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/attributes/{field_group}',
            path: {
                field_group: data.fieldGroup
            },
            query: {
                layer: data.layer,
                field: data.field,
                dimensions: data.dimensions,
                parameters: data.parameters
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class FeaturesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Read Feature
     * @param data The data for the request.
     * @param data.featureId
     * @returns FeatureOut Successful Response
     * @throws ApiError
     */
    public featuresReadFeature(data: FeaturesReadFeatureData): CancelablePromise<FeaturesReadFeatureResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/features/{feature_id}',
            path: {
                feature_id: data.featureId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Sorted Features
     * @param data The data for the request.
     * @param data.fieldGroup
     * @param data.field
     * @param data.dimensions
     * @param data.parameters
     * @param data.layer
     * @param data.sector
     * @param data.subsector
     * @param data.assetType
     * @param data.page
     * @param data.size
     * @returns Page_FeatureListItemOut_float__ Successful Response
     * @throws ApiError
     */
    public featuresReadSortedFeatures(data: FeaturesReadSortedFeaturesData): CancelablePromise<FeaturesReadSortedFeaturesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/features/sorted-by/{field_group}',
            path: {
                field_group: data.fieldGroup
            },
            query: {
                field: data.field,
                dimensions: data.dimensions,
                parameters: data.parameters,
                layer: data.layer,
                sector: data.sector,
                subsector: data.subsector,
                asset_type: data.assetType,
                page: data.page,
                size: data.size
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Protected Features
     * Get all adaptation options, by feature ID and layer, for features
     * protected by a given protector feature.
     * @param data The data for the request.
     * @param data.protectorId
     * @param data.rcp
     * @param data.protectionLevel
     * @returns ProtectedFeatureListItem Successful Response
     * @throws ApiError
     */
    public featuresReadProtectedFeatures(data: FeaturesReadProtectedFeaturesData): CancelablePromise<FeaturesReadProtectedFeaturesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/features/{protector_id}/protected-by',
            path: {
                protector_id: data.protectorId
            },
            query: {
                rcp: data.rcp,
                protection_level: data.protectionLevel
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}