##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Route to docker services
upstream frontend {
        server 127.0.0.1:3000;
}

upstream backend {
        server 127.0.0.1:3001;
}

upstream vector_tileserver {
        server 127.0.0.1:3002;
}

upstream raster_tileserver {
        server 127.0.0.1:3003;
}

# Set up rate limit
limit_req_zone $binary_remote_addr zone=slow:10m rate=50r/s;

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;
	index index.html

	server_name jamaica.infrastructureresilience.org;

	if ($http_origin = ''){
		set $http_origin "*";
	}

	location / {
		# basic authentication - use htpasswd to add users
		auth_basic "Access restricted";
		auth_basic_user_file /etc/nginx/.htpasswd;

		# limit rate of requests to root of site
		limit_req zone=slow burst=50 nodelay;

		# allow CORS with auth
		add_header Access-Control-Allow-Origin "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

		# Pass to upstream
		proxy_pass http://frontend;
	}


	location /static {
		# basic authentication - use htpasswd to add users
		auth_basic "Access restricted";
		auth_basic_user_file /etc/nginx/.htpasswd;

		# Pass to upstream
		proxy_pass http://frontend;
		expires 1y;
		access_log off;
		add_header Cache-Control "public";

		# allow CORS with auth
		add_header Access-Control-Allow-Origin "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
	}

	location /vector {
		# basic authentication - use htpasswd to add users
		auth_basic "Access restricted";
		auth_basic_user_file /etc/nginx/.htpasswd;

		proxy_pass http://vector_tileserver;
		rewrite ^/vector/(.+) /$1 break;
		proxy_set_header Host $host/vector;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		# allow CORS with auth
		add_header Access-Control-Allow-Origin "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
	}

	location /raster {
		# basic authentication - use htpasswd to add users
		auth_basic "Access restricted";
		auth_basic_user_file /etc/nginx/.htpasswd;

		proxy_pass http://raster_tileserver;
		rewrite ^/raster/(.+) /$1 break;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		# allow CORS with auth
		add_header Access-Control-Allow-Origin "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
	}

	location /api {
		# basic authentication - use htpasswd to add users
 		auth_basic "Access restricted";
		auth_basic_user_file /etc/nginx/.htpasswd;

		proxy_pass http://backend;
		rewrite ^/api/(.+) /$1 break;

		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_redirect off;
		proxy_buffering off;

		# allow CORS with auth
		add_header Access-Control-Allow-Origin "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
	}

	listen [::]:443 ssl ipv6only=on; # managed by Certbot
	listen 443 ssl; # managed by Certbot
	ssl_certificate /etc/letsencrypt/live/jamaica.infrastructureresilience.org/fullchain.pem; # managed by Certbot
	ssl_certificate_key /etc/letsencrypt/live/jamaica.infrastructureresilience.org/privkey.pem; # managed by Certbot
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

# Redirect from HTTP to HTTPS
server {
	if ($host = jamaica.infrastructureresilience.org) {
		return 301 https://$host$request_uri;
	} # managed by Certbot


	listen 80 ;
	listen [::]:80 ;
	server_name jamaica.infrastructureresilience.org;
	return 404; # managed by Certbot
}
